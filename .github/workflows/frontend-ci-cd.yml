name: Frontend CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'apps/web/**'
      - '.github/workflows/frontend-ci-cd.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'apps/web/**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: threat-modeling/frontend

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./apps/web

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: apps/web/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Run linter
      run: npm run lint

    - name: Run type check
      run: npx tsc --noEmit

    - name: Run tests
      run: npm test -- --coverage
      env:
        CI: true

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./apps/web/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  security-scan:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./apps/web

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: apps/web/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Run npm audit
      run: npm audit --audit-level moderate

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
        command: test

  build:
    runs-on: ubuntu-latest
    needs: [lint-and-test, security-scan]
    defaults:
      run:
        working-directory: ./apps/web

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: apps/web/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build
      env:
        VITE_API_URL: https://api.ansvar.com
        VITE_WS_URL: wss://api.ansvar.com
        VITE_ENVIRONMENT: production

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: apps/web/dist/
        retention-days: 7

  docker-build:
    runs-on: ubuntu-latest
    needs: [build]
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./apps/web
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.ansvar.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Update kubeconfig
      run: aws eks update-kubeconfig --name ansvar-staging

    - name: Deploy to staging
      run: |
        sed -i "s|threat-modeling/frontend:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:develop|g" k8s/frontend-deployment.yaml
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/frontend-deployment.yaml
        kubectl rollout status deployment/frontend -n threat-modeling --timeout=300s

    - name: Run smoke tests
      run: |
        sleep 30
        curl -f https://staging.ansvar.com/health || exit 1

  deploy-production:
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://ansvar.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Update kubeconfig
      run: aws eks update-kubeconfig --name ansvar-production

    - name: Deploy to production
      run: |
        sed -i "s|threat-modeling/frontend:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest|g" k8s/frontend-deployment.yaml
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/frontend-deployment.yaml
        kubectl rollout status deployment/frontend -n threat-modeling --timeout=600s

    - name: Run health checks
      run: |
        sleep 60
        curl -f https://ansvar.com/health || exit 1
        
    - name: Notify Slack on success
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: ":rocket: Frontend deployed successfully to production!"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: success()

    - name: Notify Slack on failure
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: ":x: Frontend deployment to production failed!"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: failure()

  lighthouse-audit:
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Lighthouse audit
      uses: treosh/lighthouse-ci-action@v9
      with:
        urls: |
          https://staging.ansvar.com
          https://staging.ansvar.com/login
        configPath: .lighthouserc.json
        uploadArtifacts: true
        temporaryPublicStorage: true

    - name: Comment PR with Lighthouse results
      uses: treosh/lighthouse-ci-action@v9
      if: github.event_name == 'pull_request'
      with:
        urls: https://staging.ansvar.com
        configPath: .lighthouserc.json
        uploadArtifacts: true
        temporaryPublicStorage: true